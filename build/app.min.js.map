{"version":3,"sources":["QuadGround.js","Quadpic.js","Slider.js"],"names":[],"mappings":"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","file":"app.min.js","sourcesContent":["\nObjectyve.Prototype(function(self, definition) {\n\n    definition\n    ({\n        module: 'QuadGround',\n\n        static:\n        {\n            reflectionSize : 16384,\n            reflectionRes : 256,\n            reflectionQuality : 1024\n        },\n\n        attr :\n        {\n            material : null,\n            mesh : null,\n\n            reflectCamera : null\n        },\n\n        initialize: function()\n        {\n            this.build() ;\n        },\n\n        methods:\n        {\n            build : function()\n            {\n                this.reflectCamera = new THREE.CubeCamera(0.1, self.reflectionSize, self.reflectionQuality) ;\n                this.material = new THREE.MeshBasicMaterial({\n                    envMap: this.reflectCamera.renderTarget\n                }) ;\n\n                // this.mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(10000, 10000), this.material) ;\n                this.mesh = THREE.SceneUtils.createMultiMaterialObject( \n                    new THREE.PlaneBufferGeometry(self.reflectionSize, self.reflectionSize, self.reflectionRes, self.reflectionRes, 1, 1), [\n                        this.material,\n                        // new THREE.MeshBasicMaterial({ color : 0x000000, transparent: true, opacity : 0.125 })\n                    ]\n                ) ;\n\n                this.mesh.rotation.x = -Math.PI/2 ;\n                this.mesh.position.y = -50 ;\n            }\n        }\n    }) ;\n}) ;\n","\nObjectyve.Prototype(function(self, definition) {\n\n    definition\n    ({\n        module: 'Quadpic',\n\n        attr :\n        {\n            mesh : null\n        },\n\n        initialize: function(args)\n        {\n            this.build(args) ;\n        },\n\n        methods:\n        {\n            build : function(args)\n            {\n                var color,\n                    emissive,\n                    specular,\n                    shininess,\n                    bumpScale ;\n\n                switch (args.img) {\n                    case null :\n                        break ;\n\n                    case 'clouds.gif' :\n                        color = new THREE.Color(\"rgb(192, 168, 144)\") ;\n                        emissive = new THREE.Color(\"rgb(64, 80, 96)\") ;\n                        specular = new THREE.Color(\"rgb(0, 2, 4)\") ;\n                        shininess = 8 ;\n                        bumpScale = 16 ;\n                        break ;\n\n                    case 'grass.gif' :\n                        color = new THREE.Color(\"rgb(192, 168, 0)\") ;\n                        emissive = new THREE.Color(\"rgb(128, 96, 128)\") ;\n                        specular = new THREE.Color(\"rgb(64, 48, 0)\") ;\n                        shininess = 16 ;\n                        bumpScale = 16 ;\n                        break ;\n\n                    case 'bush.gif' :\n                        color = new THREE.Color(\"rgb(192, 168, 0)\") ;\n                        emissive = new THREE.Color(\"rgb(96, 80, 96)\") ;\n                        specular = new THREE.Color(\"rgb(48, 24, 0)\") ;\n                        shininess = 8 ;\n                        bumpScale = 8 ;\n                        break ;\n\n                    case 'montrouge.gif' :\n                        color = new THREE.Color(\"rgb(216, 160, 64)\") ;\n                        emissive = new THREE.Color(\"rgb(128, 128, 128)\") ;\n                        specular = new THREE.Color(\"rgb(8, 12, 16)\") ;\n                        shininess = 8 ;\n                        bumpScale = 32 ;\n                        break ;\n\n                    case 'hills.gif' :\n                        color = new THREE.Color(\"rgb(216, 160, 64)\") ;\n                        emissive = new THREE.Color(\"rgb(64, 64, 80)\") ;\n                        specular = new THREE.Color(\"rgb(8, 12, 16)\") ;\n                        shininess = 8 ;\n                        bumpScale = 16 ;\n                        break ;\n\n                    case 'tree.gif' :\n                        color = new THREE.Color(\"rgb(255, 160, 64)\") ;\n                        emissive = new THREE.Color(\"rgb(128, 144, 144)\") ;\n                        specular = new THREE.Color(\"rgb(0, 0, 0)\") ;\n                        shininess = 8 ;\n                        bumpScale = 2 ;\n                        break ;\n\n                    case 'tree3.gif' :\n                        color = new THREE.Color(\"rgb(255, 168, 0)\") ;\n                        emissive = new THREE.Color(\"rgb(48, 56, 64)\") ;\n                        specular = new THREE.Color(\"rgb(32, 16, 0)\") ;\n                        shininess = 12 ;\n                        bumpScale = 6 ;\n                        break ;\n\n                    default :\n                        color = new THREE.Color(\"rgb(255, 160, 64)\") ;\n                        emissive = new THREE.Color(\"rgb(128, 128, 128)\") ;\n                        specular = new THREE.Color(\"rgb(0, 0, 0)\") ;\n                        shininess = 1 ;\n                        bumpScale = 1 ;\n                        break ;\n                }\n\n                var material = args.img ?\n                    new THREE.MeshPhongMaterial({\n                        transparent : true,\n                        map : THREE.ImageUtils.loadTexture('media/'+args.img),\n                        bumpMap : args.bump ? THREE.ImageUtils.loadTexture('media/'+args.bump) : null,\n                        color : color,\n                        emissive : emissive,\n                        specular : specular,\n                        shininess : shininess,\n                        bumpScale : bumpScale\n                    }) : new THREE.MeshNormalMaterial() ;\n\n                material.map.magFilter = THREE.NearestFilter ;\n                material.map.minFilter = THREE.LinearMipMapLinearFilter ;\n\n                this.mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(args.w, args.h), material) ;\n\n                this.mesh.position.x = args.x ||Â 0 ;\n                this.mesh.position.y = args.y || 0 ;\n                this.mesh.position.z = args.z || 0 ;\n            }\n        }\n    }) ;\n}) ;\n","\r\nObjectyve.Prototype(function(self, definition) {\r\n\r\n    definition\r\n    ({\r\n        module: 'Slider',\r\n\r\n        attr :\r\n        {\r\n            html : {\r\n                parent : null,\r\n                el : null,\r\n\r\n                dot : null\r\n            },\r\n\r\n            p : 0\r\n        },\r\n\r\n        initialize: function(args)\r\n        {\r\n            args = args || {} ;\r\n\r\n            if (args.parent) this.build(args.parent) ;\r\n            this.update() ;\r\n\r\n            if (args.down) this.down = args.down ;\r\n            if (args.moving) this.moving = args.moving ;\r\n            if (args.up) this.up = args.up ;\r\n        },\r\n\r\n        methods:\r\n        {\r\n            build : function(parent)\r\n            {\r\n                this.html.parent = parent ;\r\n\r\n                this.html.el = domes.create('div') ;\r\n                this.html.el\r\n                    .addClass('slider')\r\n\r\n                this.html.dot = domes.create('div') ;\r\n                this.html.dot\r\n                    .addClass('slider-dot')\r\n                    .appendTo(this.html.el) ;\r\n\r\n                this.html.el.appendTo(this.html.parent) ;\r\n            },\r\n\r\n            connect : function()\r\n            {\r\n                var _this = this,\r\n                    body = domes.query('body'),\r\n                    elBounds,\r\n                    dotWidth = this.html.dot.bounds().width,\r\n                    max,\r\n                    x ;\r\n\r\n                this.html.dot\r\n                    .on('mousedown', function(mde) {\r\n                        var mousemove = function(mme) {\r\n                                if (!mme.which) disconnect() ;\r\n\r\n                                elBounds = _this.html.el.bounds() ;\r\n                                dotBounds = _this.html.dot.bounds() ;\r\n                                max = ~~(elBounds.width - dotWidth*1.33) ;\r\n\r\n                                x = ~~(mme.pageX - elBounds.left - dotWidth/2) ;\r\n                                if (x < 0) x = 0 ;\r\n                                else if (x > max) x = max ;\r\n\r\n                                _this.html.dot.style('left', x+'px') ;\r\n                                _this.moving(x/max) ;\r\n\r\n                                _this.p = (x/max)*100 ;\r\n                                _this.update() ;\r\n                            },\r\n                            mouseup = function(mue) {\r\n                                disconnect() ;\r\n                                _this.up() ;\r\n                            },\r\n                            disconnect = function() {\r\n                                body.off('mousemove', mousemove)\r\n                                    .off('mouseup', mouseup) ;\r\n                            } ;\r\n\r\n                        body.on('mousemove', mousemove)\r\n                            .on('mouseup', mouseup) ;\r\n\r\n                        _this.down() ;\r\n                    }) ;\r\n            },\r\n\r\n            set : function(p)\r\n            {\r\n                var elBounds = this.html.el.bounds(),\r\n                    dotWidth = this.html.dot.bounds().width,\r\n                    max = ~~(elBounds.width - dotWidth*1.33) ;\r\n                this.html.dot.style('left', ~~(p*max)+'px') ;\r\n\r\n                this.p = p*100 ;\r\n                this.update() ;\r\n            },\r\n\r\n            update : function()\r\n            {\r\n                var o ;\r\n                if (this.p < 5) o = this.p/5 ;\r\n                else if (this.p > 95) o = (100 - this.p)/5 ;\r\n                else o = 1 ;\r\n\r\n                this.html.dot.style('opacity', o) ;\r\n            },\r\n\r\n            down : function() {},\r\n\r\n            moving : function() {},\r\n\r\n            up : function() {}\r\n        }\r\n    }) ;\r\n}) ;\r\n"],"sourceRoot":"/source/"}